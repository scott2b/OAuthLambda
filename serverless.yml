service: oauthapi
useDotenv: true
frameworkVersion: '2'


# There are no requirements in this base project, but typically an app is
# going to need some additional requirements.

plugins:
  - serverless-python-requirements


custom:
  pythonRequirements:
    fileName: requirements.txt
    layer: true
    dockerizePip: true
    useDownloadCache: false
    useStaticCache: false
    slim: true
    slimPatternsAppendDefaults: false
    slimPatterns:
      - '**/*.py[c|o]'
      - '**/__pycache__*'


# You will need to create the dynamodb table and be sure the name matches
# the OAUTH_TOKENS_TABLE var below.

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  region: ${env:OAUTHAPI_AWS_REGION}
  iam:
    role: ${env:LAMBDA_EXECUTION_ROLE_ARN}
  stage: dev
  deploymentBucket:
    name: socialcontext-serverless
    tags:
      - Key: Environment
        Value: ${opt:stage, self:provider.stage}
  environment:
    OAUTHAPI_AWS_ACCESS_KEY_ID: ${env:OAUTHAPI_AWS_ACCESS_KEY_ID}  
    OAUTHAPI_AWS_SECRET_ACCESS_KEY: ${env:OAUTHAPI_AWS_SECRET_ACCESS_KEY}
    OAUTHAPI_AWS_REGION: ${env:OAUTHAPI_AWS_REGION}
    OAUTH_TOKENS_TABLE: ${opt:stage, 'dev'}-OAuthTokens
    OAUTHAPI_COGNITO_USER_POOL: ${env:OAUTHAPI_COGNITO_USER_POOL}

functions:
  hello:
    handler: handlers.hello
    events:
      - httpApi:
          path: /hello
          method: get
    # Currently no requirements, but if you create a layer of shared dependencies
    # include this for functions that need it:
    #layers:
    #  - { Ref: PythonRequirementsLambdaLayer }
  token:
    handler: handlers.token
    events:
      - httpApi:
          path: /token
          method: post
  refresh_token:
    handler: handlers.refresh_token
    events:
      - httpApi:
          path: /token-refresh
          method: post

# Alternatively, create your user pool in the Cognito console. You will also
# need an applicaton client with an ID and secret, which is not being created here.

resources:
  Resources:
    HttpApi:
      DependsOn: serviceUserPool
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${opt:stage, self:provider.stage}-api-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
